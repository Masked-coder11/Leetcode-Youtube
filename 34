class Solution {
public:
    int firstOccur(vector<int>&nums, int target){
        int n=nums.size();
        int lo=0, hi=n-1;
        int ans=-1;
        while(lo<=hi){
            int mid=(lo+hi)/2;
            if(nums[mid]==target){
                ans=mid;
                hi=mid-1;
            }
            else if(nums[mid]<target){
                lo=mid+1;
            }
            else{
                hi=mid-1;
            }
        }
        return ans;
    }

    int lastOccur(vector<int>& nums, int target){
        int n=nums.size();
        int lo=0, hi=n-1;
        int ans=-1;
        while(lo<=hi){
            int mid=(lo+hi)/2;
            if(nums[mid]==target){
                ans=mid;
                lo=mid+1;
            }
            else if(nums[mid]<target){
                lo=mid+1;
            }
            else{
                hi=mid-1;
            }
        }
        return ans;
    }

    vector<int> searchRange(vector<int>& nums, int target) {
        int first=firstOccur(nums, target);
        int last= lastOccur(nums, target);

        return {first, last};
        
    }
};
