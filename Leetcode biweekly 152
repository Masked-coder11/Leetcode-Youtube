class Solution {
public:
    int totalNumbers(vector<int>& digits) {
        int n=digits.size();
        unordered_set<int>st;

        for(int i=0;i<n;i++){
            if(digits[i]==0) continue;
            for(int j=0;j<n;j++){
                if(i==j) continue;
                for(int k=0;k<n;k++){
                    if(i==k || j==k) continue;
                    if(digits[k]%2==1) continue;

                    int number = digits[i]*100+digits[j]*10+digits[k];
                    st.insert(number);
                }
            }
        }

        return st.size();
    }
};

class Spreadsheet {
public:
    unordered_map<string, int>mp;

    Spreadsheet(int rows) {
        mp["A0"]=0;
    }
    
    void setCell(string cell, int value) {
        mp[cell]=value;
    }
    
    void resetCell(string cell) {
        mp[cell]=0;
    }
    
    int getValue(string formula) {
        int n=formula.length();
        // "=X+Y"
        string x="", y="";
        bool first=false, second=false;
        int i=1;
        while(i<n && formula[i]!='+'){
            if(formula[i]>='A' && formula[i]<='Z') first=true;
            x+=formula[i];
            i++;
        }
        i++;
        while(i<n){
            if(formula[i]>='A' && formula[i]<='Z') second=true;
            y+=formula[i];
            i++;
        }
        int num1, num2;
        if(first) num1=mp[x];
        else num1=stoi(x);

        if(second) num2=mp[y];
        else num2=stoi(y);

        return num1+num2;







    }
};

/**
 * Your Spreadsheet object will be instantiated and called as such:
 * Spreadsheet* obj = new Spreadsheet(rows);
 * obj->setCell(cell,value);
 * obj->resetCell(cell);
 * int param_3 = obj->getValue(formula);
 */


class Solution {
public:
    vector<int> longestCommonPrefix(vector<string>& words, int k) {
        int n=words.size();
        vector<int>ans;

        if(k>=n){
            ans=vector<int>(n,0);
            return ans;
        }

        vector<pair<string,int>>v;
        for(int i=0;i<n;i++){
            v.push_back({words[i],i});
        }

        sort(v.begin(), v.end());

        int longest_idx=-1, longest=-1, second_longest=-1;
        for(int i=0;i<n-k+1;i++){
            int len=getPrefixLength(v[i].first, v[i+k-1].first);
            if(len>longest){
                longest_idx=i;
                second_longest=longest;
                longest=len;
            }
            else if(len>second_longest){
                second_longest=len;
            }

        }

        ans=vector<int>(n, longest);
        for(int i=longest_idx;i<=longest_idx+k-1;i++){
            ans[v[i].second]=second_longest;
        }
        return ans;
    }

    int getPrefixLength(string &s1, string &s2){
        int i=0;
        while(i<s1.length() && i<s2.length() && s1[i]==s2[i]){
            i++;
        }
        return i;

    }
};
